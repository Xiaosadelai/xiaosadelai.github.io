{"meta":{"title":"Teleporter","subtitle":"如果没能一次成功，那就叫它1.0版吧","description":"Java Android CSS PC","author":"潇洒的来","url":"https://teleporter.top"},"pages":[{"title":"","date":"2017-04-18T00:38:32.672Z","updated":"2017-04-17T14:21:33.091Z","comments":true,"path":"404.html","permalink":"https://teleporter.top/404.html","excerpt":"","text":"layout: false title: \"Teleporter | 404 Not Found\""},{"title":"","date":"2017-04-16T14:05:31.370Z","updated":"2017-04-16T14:05:31.368Z","comments":false,"path":"categories/index.html","permalink":"https://teleporter.top/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-04-16T04:27:54.381Z","updated":"2017-04-16T04:27:54.381Z","comments":false,"path":"tags/index.html","permalink":"https://teleporter.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"一个简单的App","slug":"一个简单的App","date":"2017-04-30T12:40:10.000Z","updated":"2017-05-04T04:51:13.787Z","comments":true,"path":"2017/04/30/一个简单的App/","link":"","permalink":"https://teleporter.top/2017/04/30/一个简单的App/","excerpt":"&emsp;&emsp;主页搭建完成后，我们将实现移动端的Note。总的来说，web端搭建成功后。这个note还是比较简单的。","text":"&emsp;&emsp;主页搭建完成后，我们将实现移动端的Note。总的来说，web端搭建成功后。这个note还是比较简单的。 Github托管代码&emsp;&emsp;项目所在的Github地址 编写过程Gradle文件&emsp;&emsp;在gradle中添加用到的第三方库,这里主要使用了Gson,Okhttp,recyclerview123456compile &apos;com.android.support:appcompat-v7:25.3.1&apos; compile &apos;com.android.support.constraint:constraint-layout:1.0.2&apos; compile &apos;com.squareup.okhttp3:okhttp:3.4.1&apos; compile &apos;com.google.code.gson:gson:2.7&apos; compile &apos;com.android.support:recyclerview-v7:24.2.1&apos; compile &apos;com.android.support:design:24.2.0&apos; HttpUtil工具类123456789public class HttpUtil &#123; public static void sendOkHttpRequest(String address, okhttp3.Callback callback)&#123; OkHttpClient client=new OkHttpClient(); Request request=new Request.Builder() .url(address) .build(); client.newCall(request).enqueue(callback); &#125;&#125; Notes实体类123456789101112131415161718192021222324252627282930public class Notes &#123; private int id; private String content; private String time; private int status; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getContent() &#123; return content; &#125; public void setContent(String content) &#123; this.content = content; &#125; public String getTime() &#123; return time; &#125; public void setTime(String time) &#123; this.time = time; &#125; public int getStatus() &#123; return status; &#125; public void setStatus(int status) &#123; this.status = status; &#125;&#125; 编写NotesAdapter1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465public class NotesAdapter extends RecyclerView.Adapter&lt;NotesAdapter.ViewHolder&gt;&#123; final Handler handler; public List&lt;Notes&gt; notesList; class ViewHolder extends RecyclerView.ViewHolder&#123; TextView numberText,contentText,timeText; Button button; public ViewHolder(View itemView) &#123; super(itemView); numberText= (TextView) itemView.findViewById(R.id.number); contentText= (TextView) itemView.findViewById(R.id.content); timeText= (TextView) itemView.findViewById(R.id.time); button= (Button) itemView.findViewById(R.id.button); &#125; &#125; //用到主线程的handler,需要在Adapter构造时候传入handler参数 public NotesAdapter(Handler handler, List&lt;Notes&gt; mnotesList)&#123; this.handler = handler; notesList=mnotesList; &#125; @Override public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; View view= LayoutInflater.from(parent.getContext()).inflate(R.layout.note_item,parent,false); ViewHolder holder=new ViewHolder(view); return holder; &#125; @Override public void onBindViewHolder(final ViewHolder holder, final int position) &#123; Notes notes=notesList.get(position); holder.numberText.setText(String.valueOf(position+1)); holder.contentText.setText(notes.getContent()); holder.timeText.setText(notes.getTime()); holder.button.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(final View v) &#123; final int id=notesList.get(position).getId(); String url= Constant.HTTP_DELETE+id; HttpUtil.sendOkHttpRequest(url, new Callback() &#123; @Override public void onFailure(Call call, IOException e) &#123; Message msg=new Message(); msg.what=0x88; handler.sendMessage(msg); &#125; @Override public void onResponse(Call call, Response response) throws IOException &#123; Message msg=new Message(); msg.what=0x89; handler.sendMessage(msg); &#125; &#125;); &#125; &#125;); &#125; @Override public int getItemCount() &#123; return notesList.size(); &#125;&#125; MainActivity布局&emsp;&emsp;这里用FrameLayout布局，添加fab 123456789101112131415161718192021222324252627282930313233&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.pansaian.webassistant.MainActivity&quot;&gt; &lt;android.support.v7.widget.Toolbar android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot; app:popupTheme=&quot;@style/AlertDialog.AppCompat.Light&quot; android:background=&quot;?attr/colorPrimary&quot; android:id=&quot;@+id/toolbar&quot;&gt; &lt;/android.support.v7.widget.Toolbar&gt; &lt;android.support.v7.widget.RecyclerView android:paddingTop=&quot;?attr/actionBarSize&quot; android:layout_width=&quot;match_parent&quot; android:id=&quot;@+id/recycler_view&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/android.support.v7.widget.RecyclerView&gt;&lt;android.support.design.widget.FloatingActionButton android:id=&quot;@+id/button_add_note&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;bottom|right&quot; android:layout_marginBottom=&quot;30dp&quot; android:layout_marginRight=&quot;60dp&quot; android:src=&quot;@drawable/ic_action_new&quot; android:elevation=&quot;10dp&quot; app:fabSize=&quot;normal&quot; app:pressedTranslationZ=&quot;8dp&quot; app:rippleColor=&quot;#ff87eb&quot; /&gt;&lt;/FrameLayout&gt; MainActivity业务逻辑123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106public class MainActivity extends AppCompatActivity &#123; private static final String TAG =&quot;MainActivity&quot; ; public TextView text; FloatingActionButton fab; public RecyclerView recyclerView; //handler 处理Message并更新主UI private Handler handler=new Handler()&#123; public void handleMessage(Message msg)&#123; switch(msg.what)&#123; case 0x123: String data=msg.getData().getString(&quot;data&quot;); List&lt;Notes&gt; notesList=parseJsonData(data); NotesAdapter adapter=new NotesAdapter(handler, notesList); recyclerView.setAdapter(adapter); break; case 0x122: Toast.makeText(MainActivity.this, &quot;网络出差了，稍后再试！&quot;, Toast.LENGTH_SHORT).show(); break; case 0x89: Toast.makeText(MainActivity.this, &quot;删除成功！&quot;, Toast.LENGTH_SHORT).show(); initData(); break; case 0x88: Toast.makeText(MainActivity.this, &quot;删除失败！&quot;, Toast.LENGTH_SHORT).show(); initData(); break; &#125; &#125; &#125;; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); initToolbar(); text= (TextView) findViewById(R.id.text); recyclerView= (RecyclerView) findViewById(R.id.recycler_view); LinearLayoutManager linearLayoutManager=new LinearLayoutManager(this); recyclerView.setLayoutManager(linearLayoutManager); fab= (FloatingActionButton) findViewById(R.id.button_add_note); fab.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; Intent intent=new Intent(MainActivity.this,NoteActivity.class); startActivityForResult(intent,1); &#125; &#125;); initData(); &#125; //新建note后，从noteActivity中获得结果并处理 @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; if(requestCode==1)&#123; initData(); &#125; &#125; @Override public boolean onCreateOptionsMenu(Menu menu) &#123; getMenuInflater().inflate(R.menu.toolbar,menu); return super.onCreateOptionsMenu(menu); &#125; //刷新按钮 @Override public boolean onOptionsItemSelected(MenuItem item) &#123; switch (item.getItemId())&#123; case R.id.fresh_a: initData(); break; default: &#125; return false; &#125; //从服务器获得数据 private void initData() &#123; HttpUtil.sendOkHttpRequest(Constant.HTTP_JSON, new okhttp3.Callback() &#123; @Override public void onFailure(Call call, IOException e) &#123; Message message=new Message(); message.what=0x122; handler.sendMessage(message); &#125; @Override public void onResponse(Call call, Response response) throws IOException &#123; String responseData=response.body().string(); Bundle bundle=new Bundle(); bundle.putString(&quot;data&quot;,responseData); Message message= new Message(); message.what=0x123; message.setData(bundle); handler.sendMessage(message); &#125; &#125;); &#125; //将JSON数据转换成List集合 private List&lt;Notes&gt; parseJsonData(String responseData) &#123; Gson gson=new Gson(); List&lt;Notes&gt; notesList=gson.fromJson(responseData,new TypeToken&lt;List&lt;Notes&gt;&gt;()&#123;&#125;.getType()); return notesList; &#125; //初始化toolbar private void initToolbar() &#123; Toolbar toolbar= (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); setTitle(&quot;Notes&quot;); &#125;&#125; NotesActivity的业务逻辑1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677public class NoteActivity extends AppCompatActivity&#123; private Handler handler=new Handler()&#123; public void handleMessage(Message msg)&#123; switch (msg.what)&#123; case 0x222: Toast.makeText(NoteActivity.this, &quot;添加成功！！&quot;, Toast.LENGTH_SHORT).show(); Intent intent =new Intent(); setResult(1,intent); finish(); break; case 0x221: Toast.makeText(NoteActivity.this, &quot;网络出错了&quot;, Toast.LENGTH_SHORT).show(); break; &#125; &#125; &#125;; private Toolbar mToolbar; private EditText mEtNoteContent; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.note); mEtNoteContent = (EditText) findViewById(R.id.et_note_content); initToolbar(); &#125; @Override public boolean onCreateOptionsMenu(Menu menu) &#123; getMenuInflater().inflate(R.menu.menu_main, menu); return super.onCreateOptionsMenu(menu); &#125; /** * 初始化toolbar */ private void initToolbar() &#123; mToolbar = (Toolbar) findViewById(R.id.toolbar_note_content); setSupportActionBar(mToolbar); getSupportActionBar().setDisplayHomeAsUpEnabled(true); mToolbar.setNavigationOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; finish(); &#125; &#125;); &#125; @Override public boolean onOptionsItemSelected(MenuItem item) &#123; switch (item.getItemId()) &#123; case R.id.save: String content=mEtNoteContent.getText().toString(); if (TextUtils.isEmpty(content))&#123; Toast.makeText(NoteActivity.this, &quot;无数据输入！&quot;, Toast.LENGTH_SHORT).show(); break; &#125;else&#123; String url= Constant.HTTP_ADDNOTES+content; HttpUtil.sendOkHttpRequest(url, new okhttp3.Callback() &#123; @Override public void onFailure(Call call, IOException e) &#123; Message msg=new Message(); msg.what=0x221; handler.sendMessage(msg); &#125; @Override public void onResponse(Call call, Response response) throws IOException &#123; Message msg=new Message(); msg.what=0x222; handler.sendMessage(msg); &#125; &#125;); &#125; default: break; &#125; return super.onOptionsItemSelected(item); &#125;&#125; 问题备忘Adapter中button事件更新主UI问题&emsp;&emsp;在NotesAdapter中，每一个Holder里面拥有一个删除按钮，触发后删除该note并且通知主UI更新界面，所以在Adapter的构造函数中，传入主线程的handler，可以解决问题。","categories":[{"name":"Android","slug":"Android","permalink":"https://teleporter.top/categories/Android/"}],"tags":[{"name":"AS","slug":"AS","permalink":"https://teleporter.top/tags/AS/"},{"name":"Okhttp","slug":"Okhttp","permalink":"https://teleporter.top/tags/Okhttp/"},{"name":"Notes","slug":"Notes","permalink":"https://teleporter.top/tags/Notes/"}]},{"title":"从零开始搭建个人主页","slug":"从零开始搭建个人主页","date":"2017-04-27T13:41:20.000Z","updated":"2017-05-04T11:43:01.832Z","comments":true,"path":"2017/04/27/从零开始搭建个人主页/","link":"","permalink":"https://teleporter.top/2017/04/27/从零开始搭建个人主页/","excerpt":"&emsp;&emsp;学完了SpringMVC+MyBatis框架，学以致用，就决定自己搭建一个个人导航主页。一方面：360主页内容繁琐，大部分用不到并且广告众多；另一方面搭建自己的网站可以实现一些便利功能，并且利于APP测试。","text":"&emsp;&emsp;学完了SpringMVC+MyBatis框架，学以致用，就决定自己搭建一个个人导航主页。一方面：360主页内容繁琐，大部分用不到并且广告众多；另一方面搭建自己的网站可以实现一些便利功能，并且利于APP测试。 前端制作&emsp;&emsp;前端用WebStorm写，DIV+CSS布局，难度不大。主要有几块内容：搜索条，常用网站快速导航，一个便签功能，方便随时记录一些待办事项。 百度搜索导航条12345&lt;form id=&quot;form&quot; action=&quot;http://www.baidu.com/baidu&quot; target=&quot;_blank&quot;&gt; &lt;input name=&quot;tn&quot; type=&quot;hidden&quot; value=&quot;baidu&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;From Zero to One...&quot; class=&quot;input_text&quot; name=&quot;word&quot;/&gt; &lt;input type=&quot;submit&quot; class=&quot;input_button&quot; value=&quot;&quot;/&gt; &lt;/form&gt; 图片相关的网站 图标制作网站 图片压缩网站 背景图片网站 后端搭建用maven进行库管理&emsp;&emsp;Eclipse 生成maven-webapp,将静态网站存储在web项目中，并在pom.xml添加所依赖的库及对MySQL的支持123456789101112131415&lt;properties&gt; &lt;springside.version&gt;4.2.2.GA&lt;/springside.version&gt; &lt;spring.version&gt;4.0.5.RELEASE&lt;/spring.version&gt; &lt;mybatis.version&gt;3.2.5&lt;/mybatis.version&gt; &lt;mybatis-spring.version&gt;1.2.2&lt;/mybatis-spring.version&gt; &lt;logback.version&gt;1.1.1&lt;/logback.version&gt; &lt;tomcat-jdbc.version&gt;7.0.52&lt;/tomcat-jdbc.version&gt; &lt;jackson.version&gt;2.3.1&lt;/jackson.version&gt; &lt;!-- Plugin的属性定义 --&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;java.version&gt;1.7&lt;/java.version&gt; &lt;jdbc.driver.groupId&gt;mysql&lt;/jdbc.driver.groupId&gt; &lt;jdbc.driver.artifactId&gt;mysql-connector-java&lt;/jdbc.driver.artifactId&gt; &lt;jdbc.driver.version&gt;5.1.22&lt;/jdbc.driver.version&gt; &lt;/properties&gt; 配置web.xml&emsp;&emsp;拦截.html结尾的Request。123456789101112131415161718192021222324252627282930&lt;!-- spring框架必须定义ContextLoaderListener，在启动Web容器时，自动装配Spring applicationContext.xml的配置信息 --&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;context-param&gt; &lt;!-- 指定Spring上下文配置文件 --&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath*:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;context-param&gt; &lt;param-name&gt;spring.profiles.active&lt;/param-name&gt; &lt;param-value&gt;production&lt;/param-value&gt; &lt;/context-param&gt; &lt;servlet&gt; &lt;servlet-name&gt;Dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;!-- 指定SpringMVC配置文件 --&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;/WEB-INF/springmvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;!-- 指定请求的后缀，可以随意写，这里用.html作为请求后缀 --&gt; &lt;servlet-name&gt;Dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;*.html&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; 配置springmvc.xml123456&lt;!-- spring可以自动去扫描base-package下面或者子包下面的java文件，如果扫描到有@Component @Controller @Service @Repository等这些注解的类，则把这些类注册为bean --&gt; &lt;context:component-scan base-package=&quot;com.pansaian.*&quot; /&gt; &lt;!-- 模型解析，在请求时为模型视图名称添加前后缀 比如在controller类中需要请求/WEB-INF/page/index.jsp文件，直接写index就可以了--&gt; &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; p:prefix=&quot;/WEB-INF/page/&quot; p:suffix=&quot;.jsp&quot; /&gt; 编写实体类&emsp;&emsp;在这里，删除note并不是真的在数据库中删除这条数据，而是指定一个status,值为1表示可用，值为0表示已删除123456789101112131415161718192021222324252627282930public class Notes &#123; private int id; private String content; private Date time; private int status; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getContent() &#123; return content; &#125; public void setContent(String content) &#123; this.content = content; &#125; public Date getTime() &#123; return time; &#125; public void setTime(Date time) &#123; this.time = time; &#125; public int getStatus() &#123; return status; &#125; public void setStatus(int status) &#123; this.status = status; &#125;&#125; 编写Controller&emsp;&emsp;Controller主要控制将请求发往哪个Service，并处理service的结果并返还给浏览器。在这里，我们要实现note的查询，删除，新建功能。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980@Controllerpublic class IndexController &#123; @Resource NotesService service; //查询notes @RequestMapping(value = &quot;index&quot;) public String helloWorld(HttpServletRequest request)&#123; int notesCount = service.getNotesCount(); PageParam pageParam = new PageParam(); pageParam.setNotesCount(notesCount); pageParam = service.getPageParm(pageParam); //content长度进行限制 List&lt;Notes&gt; mList=pageParam.getData(); for(Notes item:mList)&#123; if (item.getContent().length()&gt;15)&#123; item.setContent(item.getContent().substring(0,14)+&quot;...&quot;); &#125; &#125; pageParam.setData(mList); request.setAttribute(&quot;pageParam&quot;, pageParam); return &quot;index&quot;; &#125; //删除notes @RequestMapping(value=&quot;cancel&quot;) public void cancel(HttpServletRequest request, HttpServletResponse response) throws IOException&#123; int id=Integer.valueOf(request.getParameter(&quot;id&quot;)); System.out.println(id); service.cancel(id); response.sendRedirect(&quot;index.html&quot;); &#125; //APP删除notes @RequestMapping(value=&quot;cancelApp&quot;) public void cancelApp(HttpServletRequest request, HttpServletResponse response) throws IOException&#123; int id=Integer.valueOf(request.getParameter(&quot;id&quot;)); System.out.println(id); service.cancel(id); &#125; //增加notes @RequestMapping(value=&quot;add&quot;) public String addNotes()&#123; return &quot;add&quot;; &#125; @RequestMapping(value=&quot;addNotes&quot;) public void addOne(HttpServletRequest request,HttpServletResponse response) throws IOException&#123; String content=request.getParameter(&quot;content&quot;); Notes notes=new Notes(); notes.setContent(content); notes.setTime(new Date()); notes.setStatus(1); service.addNotes(notes); &#125; //App返回json类型的数据 @RequestMapping(value=&quot;json&quot;) public String jsontest(HttpServletRequest request)&#123; int notesCount = service.getNotesCount(); PageParam pageParam = new PageParam(); pageParam.setNotesCount(notesCount); pageParam = service.getPageParm(pageParam); //将数据生成json格式 JSONArray jsonArray=new JSONArray(); SimpleDateFormat format; format =new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;); for (int i=0;i&lt;notesCount;i++)&#123; JSONObject object= new JSONObject(); object.put(&quot;id&quot;, pageParam.getData().get(i).getId()); object.put(&quot;content&quot;, pageParam.getData().get(i).getContent()); object.put(&quot;time&quot;, format.format(pageParam.getData().get(i).getTime())); object.put(&quot;status&quot;, pageParam.getData().get(i).getStatus()); jsonArray.add(object); &#125; request.setAttribute(&quot;result&quot;,jsonArray.toString()); return &quot;json&quot;; &#125;&#125; 编写Service&emsp;&emsp;Service通知DAO层进行数据处理123456789101112131415161718192021@Resource NotesDao dao ; //获取note总数量 public int getNotesCount() &#123; return dao.getNotesCount(); &#125; //获取满足条件的note public PageParam getPageParm(PageParam pageParam) &#123; List&lt;Notes&gt; notesList = dao.getNotes(); pageParam.setData(notesList); return pageParam; &#125; //删除note public void cancel(int id) &#123; dao.cancel(id); &#125; //添加note public void addNotes(Notes notes) &#123; System.out.println(&quot;添加一条note&quot;); dao.addNotes(notes); &#125; 配置applicationContext.xml&emsp;&emsp;MyBatis的配置设置123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!-- MyBatis配置 --&gt; &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt; &lt;!-- 显式指定Mapper文件位置 --&gt; &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:/mybatis/*Mapper.xml&quot; /&gt; &lt;!-- mybatis配置文件路径 --&gt; &lt;property name=&quot;configLocation&quot; value=&quot;classpath:/mybatis/config.xml&quot;/&gt; &lt;/bean&gt; &lt;bean id=&quot;sqlSessionTemplate&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt; &lt;constructor-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot; /&gt; &lt;!-- 这个执行器会批量执行更新语句, 还有SIMPLE 和 REUSE --&gt; &lt;constructor-arg index=&quot;1&quot; value=&quot;BATCH&quot; /&gt; &lt;/bean&gt; &lt;!-- 扫描basePackage接口 --&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;!-- 映射器接口文件的包路径， --&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.pansaian.myweb.dao&quot; /&gt; &lt;/bean&gt; &lt;!-- 使用annotation定义事务 --&gt; &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; proxy-target-class=&quot;true&quot; /&gt; &lt;!-- 数据源配置, 使用Tomcat JDBC连接池 --&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.tomcat.jdbc.pool.DataSource&quot; destroy-method=&quot;close&quot;&gt; &lt;!-- Connection Info --&gt; &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt; &lt;!-- Connection Pooling Info --&gt; &lt;property name=&quot;maxActive&quot; value=&quot;$&#123;jdbc.pool.maxActive&#125;&quot; /&gt; &lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;jdbc.pool.maxIdle&#125;&quot; /&gt; &lt;property name=&quot;minIdle&quot; value=&quot;0&quot; /&gt; &lt;property name=&quot;defaultAutoCommit&quot; value=&quot;false&quot; /&gt; &lt;/bean&gt; &lt;!-- production环境 --&gt; &lt;beans profile=&quot;production&quot;&gt; &lt;context:property-placeholder ignore-unresolvable=&quot;true&quot; file-encoding=&quot;utf-8&quot; location=&quot;classpath:config.properties,classpath:jdbc.properties&quot; /&gt; &lt;/beans&gt; 编写DAO层1234567@Repositorypublic interface NotesDao &#123; int getNotesCount(); List&lt;Notes&gt; getNotes(); void cancel(int id); void addNotes(Notes notes);&#125; 编写Mapper文件&emsp;&emsp;虽然Mapper文件可以用Java来写，但是Mapper的初衷就是希望SQL不要侵入到Java语言中，所以用配置文件来写Mapper12345678910111213141516171819&lt;mapper namespace=&quot;com.pansaian.myweb.dao.NotesDao&quot;&gt; &lt;!--获得note数量 --&gt; &lt;select id=&quot;getNotesCount&quot; resultType=&quot;int&quot;&gt; select count(*) from notes where status=1 &lt;/select&gt; &lt;!--获得note，并且按时间排序 --&gt; &lt;select id=&quot;getNotes&quot; resultType=&quot;com.pansaian.myweb.entity.Notes&quot; &gt; select * from notes where status=1 order by time desc &lt;/select&gt; &lt;!--删除指定ID的note --&gt; &lt;update id=&quot;cancel&quot; parameterType=&quot;int&quot; &gt; update notes set status=0 where id=#&#123;id&#125; &lt;/update&gt; &lt;!--添加一条note --&gt; &lt;insert id=&quot;addNotes&quot; parameterType=&quot;com.pansaian.myweb.entity.Notes&quot;&gt; insert into notes(content,time,status) values(#&#123;content&#125;,#&#123;time&#125;,#&#123;status&#125;) &lt;/insert&gt;&lt;/mapper&gt; 其他问题备注note输出到JSP页面&emsp;&emsp; 这里我们用 c:foreach 标签循环输出note，日期用 fmt:formatDate 标签进行格式化12345678910c:forEach items=&quot;$&#123;pageParam.data &#125;&quot; var=&quot;item&quot; varStatus=&quot;status&quot;&gt; &lt;li&gt; &lt;div class=&quot;note&quot;&gt; &lt;em&gt;$&#123;status.count &#125;&lt;/em&gt; &lt;h3&gt;$&#123;item.content &#125;&lt;/h3&gt; &lt;span&gt;&lt;fmt:formatDate pattern=&quot;MM-dd&quot; value=&quot;$&#123;item.time&#125;&quot; /&gt;&lt;/span&gt; &lt;a href=&quot;cancel.html?id=$&#123;item.id &#125;&quot;&gt;&lt;/a&gt; &lt;/div&gt; &lt;/li&gt;&lt;/c:forEach&gt; 添加新note后窗体关闭问题及页面刷新问题&emsp;&emsp;这个问题暂时没有我还没想到好的解决办法，在以后版本中解决123456789&lt;form class=&quot;form&quot; action=&quot;addNotes.html&quot;&gt; &lt;textarea class=&quot;content&quot; name=&quot;content&quot;&gt;&lt;/textarea&gt; &lt;script&gt; document.getElementById(&quot;isubmit&quot;).onclick=function()&#123; window.close(); &#125; &lt;/script&gt; &lt;input class=&quot;ibutton&quot; type=&quot;submit&quot; value=&quot;添加&quot; id=&quot;isubmit&quot;/&gt; &lt;/form&gt;","categories":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://teleporter.top/categories/JavaWeb/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://teleporter.top/tags/Web/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://teleporter.top/tags/SpringMVC/"},{"name":"Mybatis","slug":"Mybatis","permalink":"https://teleporter.top/tags/Mybatis/"}]},{"title":"AS设置及问题汇总（不定期更新）","slug":"AS设置及问题汇总（不定期更新）","date":"2017-04-25T13:41:37.000Z","updated":"2017-04-25T14:13:18.914Z","comments":true,"path":"2017/04/25/AS设置及问题汇总（不定期更新）/","link":"","permalink":"https://teleporter.top/2017/04/25/AS设置及问题汇总（不定期更新）/","excerpt":"&emsp;&emsp;Android Studio的软件设置及问题汇总，长期更新。","text":"&emsp;&emsp;Android Studio的软件设置及问题汇总，长期更新。 软件设置初始设置，界面与字体。 设置自动导包 问题汇总","categories":[{"name":"Software","slug":"Software","permalink":"https://teleporter.top/categories/Software/"}],"tags":[{"name":"AS","slug":"AS","permalink":"https://teleporter.top/tags/AS/"},{"name":"Settings","slug":"Settings","permalink":"https://teleporter.top/tags/Settings/"}]},{"title":"使用Hexo+Github搭建个人博客","slug":"使用Hexo-Github搭建个人博客","date":"2017-04-16T13:41:59.000Z","updated":"2017-04-18T01:15:22.296Z","comments":true,"path":"2017/04/16/使用Hexo-Github搭建个人博客/","link":"","permalink":"https://teleporter.top/2017/04/16/使用Hexo-Github搭建个人博客/","excerpt":"&emsp;&emsp;Hexo是一个简单、快速、强大的基于 Github Pages的博客发布工具，支持Markdown格式，有众多优秀插件和主题。","text":"&emsp;&emsp;Hexo是一个简单、快速、强大的基于 Github Pages的博客发布工具，支持Markdown格式，有众多优秀插件和主题。 问题汇总 indigo主题无法从github上Clone下来 &emsp;&emsp;SSH key没有在GitHub上正确配置，配置完后测试是否成功 1$ ssh -T git@git@github.com 域名解析，无法访问到github &emsp;&emsp;需要在GitHub中添加CNAME文件，如图。 参考 Hexo+Github搭建教程 Indigo主题配置 markdown官方文档","categories":[{"name":"other","slug":"other","permalink":"https://teleporter.top/categories/other/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://teleporter.top/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://teleporter.top/tags/github/"},{"name":"阿里云","slug":"阿里云","permalink":"https://teleporter.top/tags/阿里云/"}]}]}